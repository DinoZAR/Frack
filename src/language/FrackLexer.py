# Generated from /home/spencer/Documents/frack/src/Frack.g4 by ANTLR 4.5.3
from antlr4 import *
from io import StringIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\34")
        buf.write("\u00bb\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\3\2\3\2\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3")
        buf.write("\6\3\7\3\7\3\7\3\b\3\b\3\t\3\t\3\n\3\n\3\13\3\13\3\f\3")
        buf.write("\f\3\r\3\r\3\16\3\16\3\17\3\17\3\17\3\20\3\20\3\21\3\21")
        buf.write("\3\21\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\25\3\25\3\25")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\27\3\27\3\27\3\27\3\27\3\30")
        buf.write("\3\30\5\30y\n\30\3\30\3\30\3\31\6\31~\n\31\r\31\16\31")
        buf.write("\177\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0089\n\32")
        buf.write("\3\33\3\33\3\33\3\33\6\33\u008f\n\33\r\33\16\33\u0090")
        buf.write("\3\34\3\34\3\35\6\35\u0096\n\35\r\35\16\35\u0097\3\35")
        buf.write("\3\35\6\35\u009c\n\35\r\35\16\35\u009d\3\35\6\35\u00a1")
        buf.write("\n\35\r\35\16\35\u00a2\3\35\3\35\3\35\6\35\u00a8\n\35")
        buf.write("\r\35\16\35\u00a9\5\35\u00ac\n\35\3\36\3\36\7\36\u00b0")
        buf.write("\n\36\f\36\16\36\u00b3\13\36\3\37\6\37\u00b6\n\37\r\37")
        buf.write("\16\37\u00b7\3\37\3\37\2\2 \3\3\5\4\7\5\t\6\13\7\r\b\17")
        buf.write("\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23")
        buf.write("%\24\'\25)\26+\27-\30/\31\61\2\63\2\65\2\67\29\32;\33")
        buf.write("=\34\3\2\b\6\2\f\f\17\17$$^^\5\2\62;CHch\3\2\62;\5\2C")
        buf.write("\\aac|\6\2\63;C\\aac|\5\2\13\f\17\17\"\"\u00c4\2\3\3\2")
        buf.write("\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2")
        buf.write("\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2")
        buf.write("\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35")
        buf.write("\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2")
        buf.write("\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2")
        buf.write("\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\3?\3\2\2\2\5A\3\2")
        buf.write("\2\2\7C\3\2\2\2\tE\3\2\2\2\13G\3\2\2\2\rI\3\2\2\2\17L")
        buf.write("\3\2\2\2\21N\3\2\2\2\23P\3\2\2\2\25R\3\2\2\2\27T\3\2\2")
        buf.write("\2\31V\3\2\2\2\33X\3\2\2\2\35Z\3\2\2\2\37]\3\2\2\2!_\3")
        buf.write("\2\2\2#b\3\2\2\2%d\3\2\2\2\'g\3\2\2\2)i\3\2\2\2+l\3\2")
        buf.write("\2\2-q\3\2\2\2/v\3\2\2\2\61}\3\2\2\2\63\u0088\3\2\2\2")
        buf.write("\65\u008a\3\2\2\2\67\u0092\3\2\2\29\u00ab\3\2\2\2;\u00ad")
        buf.write("\3\2\2\2=\u00b5\3\2\2\2?@\7*\2\2@\4\3\2\2\2AB\7+\2\2B")
        buf.write("\6\3\2\2\2CD\7}\2\2D\b\3\2\2\2EF\7\177\2\2F\n\3\2\2\2")
        buf.write("GH\7.\2\2H\f\3\2\2\2IJ\7c\2\2JK\7u\2\2K\16\3\2\2\2LM\7")
        buf.write("\60\2\2M\20\3\2\2\2NO\7?\2\2O\22\3\2\2\2PQ\7`\2\2Q\24")
        buf.write("\3\2\2\2RS\7,\2\2S\26\3\2\2\2TU\7\61\2\2U\30\3\2\2\2V")
        buf.write("W\7-\2\2W\32\3\2\2\2XY\7/\2\2Y\34\3\2\2\2Z[\7#\2\2[\\")
        buf.write("\7?\2\2\\\36\3\2\2\2]^\7>\2\2^ \3\2\2\2_`\7>\2\2`a\7?")
        buf.write("\2\2a\"\3\2\2\2bc\7@\2\2c$\3\2\2\2de\7@\2\2ef\7?\2\2f")
        buf.write("&\3\2\2\2gh\7#\2\2h(\3\2\2\2ij\7k\2\2jk\7h\2\2k*\3\2\2")
        buf.write("\2lm\7v\2\2mn\7j\2\2no\7g\2\2op\7p\2\2p,\3\2\2\2qr\7g")
        buf.write("\2\2rs\7n\2\2st\7u\2\2tu\7g\2\2u.\3\2\2\2vx\7$\2\2wy\5")
        buf.write("\61\31\2xw\3\2\2\2xy\3\2\2\2yz\3\2\2\2z{\7$\2\2{\60\3")
        buf.write("\2\2\2|~\5\63\32\2}|\3\2\2\2~\177\3\2\2\2\177}\3\2\2\2")
        buf.write("\177\u0080\3\2\2\2\u0080\62\3\2\2\2\u0081\u0089\n\2\2")
        buf.write("\2\u0082\u0089\5\65\33\2\u0083\u0084\7^\2\2\u0084\u0089")
        buf.write("\7\f\2\2\u0085\u0086\7^\2\2\u0086\u0087\7\17\2\2\u0087")
        buf.write("\u0089\7\f\2\2\u0088\u0081\3\2\2\2\u0088\u0082\3\2\2\2")
        buf.write("\u0088\u0083\3\2\2\2\u0088\u0085\3\2\2\2\u0089\64\3\2")
        buf.write("\2\2\u008a\u008b\7^\2\2\u008b\u008c\7z\2\2\u008c\u008e")
        buf.write("\3\2\2\2\u008d\u008f\5\67\34\2\u008e\u008d\3\2\2\2\u008f")
        buf.write("\u0090\3\2\2\2\u0090\u008e\3\2\2\2\u0090\u0091\3\2\2\2")
        buf.write("\u0091\66\3\2\2\2\u0092\u0093\t\3\2\2\u00938\3\2\2\2\u0094")
        buf.write("\u0096\t\4\2\2\u0095\u0094\3\2\2\2\u0096\u0097\3\2\2\2")
        buf.write("\u0097\u0095\3\2\2\2\u0097\u0098\3\2\2\2\u0098\u0099\3")
        buf.write("\2\2\2\u0099\u009b\7\60\2\2\u009a\u009c\t\4\2\2\u009b")
        buf.write("\u009a\3\2\2\2\u009c\u009d\3\2\2\2\u009d\u009b\3\2\2\2")
        buf.write("\u009d\u009e\3\2\2\2\u009e\u00ac\3\2\2\2\u009f\u00a1\t")
        buf.write("\4\2\2\u00a0\u009f\3\2\2\2\u00a1\u00a2\3\2\2\2\u00a2\u00a0")
        buf.write("\3\2\2\2\u00a2\u00a3\3\2\2\2\u00a3\u00a4\3\2\2\2\u00a4")
        buf.write("\u00ac\7\60\2\2\u00a5\u00a7\7\60\2\2\u00a6\u00a8\t\4\2")
        buf.write("\2\u00a7\u00a6\3\2\2\2\u00a8\u00a9\3\2\2\2\u00a9\u00a7")
        buf.write("\3\2\2\2\u00a9\u00aa\3\2\2\2\u00aa\u00ac\3\2\2\2\u00ab")
        buf.write("\u0095\3\2\2\2\u00ab\u00a0\3\2\2\2\u00ab\u00a5\3\2\2\2")
        buf.write("\u00ac:\3\2\2\2\u00ad\u00b1\t\5\2\2\u00ae\u00b0\t\6\2")
        buf.write("\2\u00af\u00ae\3\2\2\2\u00b0\u00b3\3\2\2\2\u00b1\u00af")
        buf.write("\3\2\2\2\u00b1\u00b2\3\2\2\2\u00b2<\3\2\2\2\u00b3\u00b1")
        buf.write("\3\2\2\2\u00b4\u00b6\t\7\2\2\u00b5\u00b4\3\2\2\2\u00b6")
        buf.write("\u00b7\3\2\2\2\u00b7\u00b5\3\2\2\2\u00b7\u00b8\3\2\2\2")
        buf.write("\u00b8\u00b9\3\2\2\2\u00b9\u00ba\b\37\2\2\u00ba>\3\2\2")
        buf.write("\2\16\2x\177\u0088\u0090\u0097\u009d\u00a2\u00a9\u00ab")
        buf.write("\u00b1\u00b7\3\b\2\2")
        return buf.getvalue()


class FrackLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]


    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    STRING = 23
    NUM = 24
    IDENT = 25
    WS = 26

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'{'", "'}'", "','", "'as'", "'.'", "'='", "'^'", 
            "'*'", "'/'", "'+'", "'-'", "'!='", "'<'", "'<='", "'>'", "'>='", 
            "'!'", "'if'", "'then'", "'else'" ]

    symbolicNames = [ "<INVALID>",
            "STRING", "NUM", "IDENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "STRING", "CHAR_SEQUENCE", "CHAR", "ESCAPE_SEQUENCE", 
                  "HEX", "NUM", "IDENT", "WS" ]

    grammarFileName = "Frack.g4"

    def __init__(self, input=None):
        super().__init__(input)
        self.checkVersion("4.5.3")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


